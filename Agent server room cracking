// Triple X game developed by Austin. Last worked on 12/13/2021. COMPLETED
#include <iostream> //Preprocessor Directive
#include <ctime> // Lets us seed rand to make it always randomized

using namespace std;

void PrintIntroduction(int Difficulty) // Creating a function with parameters so we can use LevelDifficulty
{
	cout << "\nYou are a secrete agent breaking into a level " << Difficulty;
	cout << " secure server room.\nEnter the correct code to continue...\n\n";
}

bool PlayGame(int Difficulty) // Creating a function. With bool it determines if player has completed a level or not. The parameter will be for the level of difficulty
{
	PrintIntroduction(Difficulty);

	// Variable declarations. Difficulty + Diff makes the range start at its level. Seeding it makes it really random and not in the same order.
	const int CodeA = rand() % Difficulty + Difficulty; // First number of the 'code' 
	const int CodeB = rand() % Difficulty + Difficulty; // Second number of the 'code'
	const int CodeC = rand() % Difficulty + Difficulty; // Third number of the 'code'

	const int CodeSum = CodeA + CodeB + CodeC;
	const int CodeProduct = CodeA * CodeB * CodeC;

	cout << "There are 3 numbers in the code" << endl;
	cout << "The codes add-up to: " << CodeSum << endl;
	cout << "The codes multiply to give: " << CodeProduct << endl;
	cout << endl;

	// Declaring different 'Guess' makes it so that when a user enters three numbers it doesn't show up all combined together as a three digit number.
	int GuessA;
	int GuessB;
	int GuessC;

	cin >> GuessA >> GuessB >> GuessC;

	int GuessSum = GuessA + GuessB + GuessC;
	int GuessProduct = GuessA * GuessB * GuessC;

	// Checking if the players guess is correct
	if (GuessSum == CodeSum && GuessProduct == CodeProduct)
	{
		cout << "\nWell done agent, you have extracted a file! Keep going!";
		return true;
	}
	else
	{
		cout << "\nYou entered the wrong code! Careful agent. Try again.";
		return false;
	}
}

int main() // Main function
{
	srand(time(NULL)); // Creates new random sequence based on time of day

	int LevelDifficulty = 1;
	int const MaxLevel = 5;

	while (LevelDifficulty <= MaxLevel) // Allows you to continue playing the game even after guessing. Loop until all levels are completed
	{
		 bool bLevelComplete = PlayGame(LevelDifficulty); // Unreal must have lowercase 'b'. Determines if player has completed a level or not. Passing LD to print value of our level.
		 cin.clear(); // Clears any errors
		 cin.ignore(); // Discards the buffer

		 if (bLevelComplete)
		 {
		 	++LevelDifficulty;
		 }
	}

	cout << "Great work agent! You got all the files! Now get out of there!\n";

	return 0;
}
